plugins {
    id 'java'
    id 'org.kordamp.gradle.jandex' version '0.6.0'
    id 'application'
}
description = """helidon-notification"""

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    implementation project(':model')
    implementation 'io.helidon.microprofile.scheduling:helidon-microprofile-scheduling'
    implementation 'org.eclipse.angus:angus-mail:2.0.3'
    implementation "com.github.jknack:handlebars:4.4.0"
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-hibernate'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-datasource-hikaricp'
    implementation 'jakarta.transaction:jakarta.transaction-api'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-jpa'
    implementation 'mysql:mysql-connector-java:8.0.33'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.testcontainers:junit-jupiter:1.20.1"
    testImplementation "org.testcontainers:mysql:1.20.1"
}

test {
    // Avoid project dir pollution by Narayana
    systemProperty "ObjectStoreEnvironmentBean.objectStoreDir", "build/narayana"
    useJUnitPlatform()
    doLast {
        // Clean Narayana leftovers
        delete("ObjectStore")
    }
}

tasks.withType(Tar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('copyLibs', Copy) {
    from configurations.runtimeClasspath
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into 'build/libs/libs'
}

tasks.register('moveBeansXML', Copy) {
    from layout.buildDirectory.file("resources/main/META-INF/beans.xml").get().toString()
    into layout.buildDirectory.dir("classes/java/main/META-INF").get().toString()
    dependsOn(jar)
}

jar {
    doFirst {
        archiveFileName = "${project.name}.jar"
        manifest {
            attributes('Main-Class': "${project.mainClass}",
                    'Class-Path': configurations.runtimeClasspath.files
                            .collect { "libs/$it.name" }.join(' ')
            )
        }
    }
}

application {
    mainClass = "${project.mainClass}"
}

tasks.named('compileTestJava') {
    dependsOn 'jandex'
}

tasks.named('jar') {
    dependsOn 'jandex'
}

compileTestJava.dependsOn jandex
jar.dependsOn jandex
tasks.compileTestJava.dependsOn(tasks.moveBeansXML)
test.dependsOn moveBeansXML
run.dependsOn moveBeansXML
